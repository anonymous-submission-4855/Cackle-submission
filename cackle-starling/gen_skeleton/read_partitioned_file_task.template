void {class_name}::{task_name}(int inPartitions, int inFileIdx, int selectedPartition, GetReplyPtr cache_data{in_parameters}){{
  static thread_local S3Client s3("{intermediate_s3_bucket}", "us-east-1", currNumThreads);
  size_t data_len;
  const char* data_buf;
  std::unique_ptr<char[]> buf_mgr_raw(nullptr);
  {in_local_dicts}
  uint8_t numDictEntries;
    int64_t startIdx; 
    int64_t endIdx;
    long startread = 0;
    int64_t numRecords = 0;
    //TODO:
    long endread = sizeof(int64_t)*inPartitions+{in_max_encoding_size};
    {{
      std::unique_ptr<char[]> buf_mgr(nullptr);
      const char * buf;
      int64_t currIdx = 0;
      auto before_read = std::chrono::steady_clock::now();
      if (cache_data) {{
        buf = cache_data->value().header().data();
      }} else {{
        buf_mgr.reset(new char[endread-startread]);
        char * tmpbuf = buf_mgr.get();
        readFromS3(s3, std::to_string(inFileIdx)+"_pt{in_operator_idx}_"+query_id, startread, endread, tmpbuf); 
        buf = tmpbuf;
      }}
      auto after_read = std::chrono::steady_clock::now();
      
      {in_populate_dicts}

      if (!cache_data) {{
        startIdx = currIdx+sizeof(uint64_t)*inPartitions;
        if (selectedPartition != 0){{
          std::memcpy(reinterpret_cast<char*>(&startIdx), buf+currIdx+(sizeof(uint64_t)*(selectedPartition-1)), sizeof(startIdx));
        }}
        std::memcpy(reinterpret_cast<char*>(&endIdx), buf+currIdx+(sizeof(uint64_t)*(selectedPartition)), sizeof(endIdx));
      }}
    }}
    if (cache_data) {{
      data_buf = cache_data->value().data().data();
      data_len = cache_data->value().data().size();
    }} else {{
      if (endIdx == startIdx) return;
      uint64_t raw_len = endIdx-startIdx;
      buf_mgr_raw.reset(new char[raw_len]);
      auto before_read = std::chrono::steady_clock::now();
      readFromS3(s3, std::to_string(inFileIdx)+"_pt{in_operator_idx}_"+query_id, startIdx, endIdx, buf_mgr_raw.get());
      auto after_read = std::chrono::steady_clock::now();
      data_buf = buf_mgr_raw.get();
      data_len = raw_len;
    }}
    int64_t raw_len = data_len;
    int64_t total_len;
    int64_t currIdx = 0;
    {uncompress}
    numRecords = total_len/{in_record_size};
    struct {in_record_type} {in_rec_name};
{additional_initialization}
    for (int recordIdx = 0; recordIdx < numRecords; ++recordIdx){{
      std::memcpy((char *)&{in_rec_name}, buf+currIdx, {in_record_size});
      {in_remap_dicts}
      currIdx += {in_record_size};
{row_processing}
    }}
{post_row_processing}
}}
